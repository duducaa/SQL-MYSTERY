#CRIAR BANCO DE DADOS
DROP DATABASE sql_mystery;

CREATE DATABASE SQL_MYSTERY;
USE  SQL_MYSTERY;

#TABELAS DO JOGO SQL MYSTERY

#CONVIDADOS DO CASAMENTO
CREATE TABLE TB_PERFIL (
  ID_PERFIL INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
  NOME_PERFIL VARCHAR(255)
);

#TABELA DAS ESPECIES DOS PERSOONAGENS DO JOGO 
CREATE TABLE TB_ESPECIE (
	ID_ESPECIE INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    NOME_ESPECIE VARCHAR(255) NOT NULL
);

#TABELA DAS MAGIAS DO REINO
CREATE TABLE TB_MAGIA (
	ID_MAGIA INT  UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    TIPO_MAGIA VARCHAR(255)
);

#TABELA DOS TITULOS DE NOBRESA 
CREATE TABLE TB_TITULO (
	ID_TITULO INT  UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    TIPO_TITULO VARCHAR(255)
);

CREATE TABLE TB_REGIAO (
  ID_REGIAO INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  NOME_REGIAO VARCHAR(255)
);

CREATE TABLE TB_AFILIACAO (
  ID_AFILIACAO INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  AFILIACAO VARCHAR(255) NOT NULL
);

#CARTÓRIO DO MUNDO ANIMAL
CREATE TABLE TB_PERSONAGEM (
  ID_PERSONAGEM INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
  NOME_PERSONAGEM VARCHAR(255) NOT NULL,
  CAF VARCHAR(255) NOT NULL UNIQUE, #CAF (COMPROVANTE DE ANIMAL FISICO)
  DATA_NASCIMENTO DATE NOT NULL,
  ID_AFILIACAO INT UNSIGNED NOT NULL,
  ID_ESPECIE INT  UNSIGNED NOT NULL,
  ID_TITULO INT  UNSIGNED  NOT NULL,
  ID_MAGIA INT  UNSIGNED  NOT NULL,
  ID_REGIAO INT  UNSIGNED  NOT NULL,
  ID_PERFIL INT  UNSIGNED  NOT NULL,
  FOREIGN KEY (ID_PERFIL) REFERENCES TB_PERFIL(ID_PERFIL),
  FOREIGN KEY (ID_ESPECIE) REFERENCES TB_ESPECIE(ID_ESPECIE),
  FOREIGN KEY (ID_MAGIA) REFERENCES TB_MAGIA(ID_MAGIA),
  FOREIGN KEY (ID_TITULO) REFERENCES TB_TITULO(ID_TITULO), 
  FOREIGN KEY (ID_REGIAO) REFERENCES TB_REGIAO(ID_REGIAO),
  FOREIGN KEY (ID_AFILIACAO) REFERENCES TB_AFILIACAO(ID_AFILIACAO)
);

#TABELA COM AS SALAS DOS EVENTOS
CREATE TABLE TB_SALA (
  ID_SALA INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
  NOME_SALA VARCHAR(255) NOT NULL,
  CAPACIDADE INT NOT NULL
);

#TABELA ITENS
CREATE TABLE TB_ITEM (
	ID_ITEM INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
	NOME_ITEM VARCHAR(255) NOT NULL,
	ID_SALA INT UNSIGNED NOT NULL,
	CONSTRAINT ID_SALA_ITENS_FK FOREIGN KEY (ID_SALA) REFERENCES TB_SALA(ID_SALA)
);

#TABELA  TESTEMUNHAS
CREATE TABLE TB_DEPOIMENTO (
  ID_DEPOIMENTO INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  ID_PERSONAGEM INT UNSIGNED NOT NULL,
  DEPOIMENTO TEXT NOT NULL,
  CONSTRAINT ID_PERSONAGEM_TESTEMUNHAS_FK FOREIGN KEY (ID_PERSONAGEM) REFERENCES TB_PERSONAGEM(ID_PERSONAGEM)
);

#TABELA DE SOLUÇÃO PARA VALIDAR O SUSPEITO
CREATE TABLE TB_SOLUCAO (
  ID_SOLUCAO INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  ID_CULPADO INT UNSIGNED NOT NULL UNIQUE,
  FOREIGN KEY (ID_CULPADO) REFERENCES TB_PERSONAGEM(ID_PERSONAGEM)
);

#SEGREDO PARA AUXILIAR NA SOLUÇÃO
CREATE TABLE TB_COFRE(
  ID_COFRE INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  SENHA INT NOT NULL,
  PISTA TEXT
);

#FICHAS CRIMINAIS DO REINO
CREATE TABLE TB_FICHA_CRIMINAL(
  ID_CRIME INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  ID_PERSONAGEM INT UNSIGNED NOT NULL,
  CRIME ENUM('ASSASSINATO','ROUBO','MAGIA DAS TREVAS','ALQUIMIA PROIBIDA','ESPIONAGEM','CORRUPIÇÃO','CONTRABANDO'),
  INICIO_PENA DATE NOT NULL,
  FIM_PENA DATE NOT NULL,
  STATUS ENUM('PRESO','LIVRE') NOT NULL,
  CONSTRAINT ID_PERSONAGEM_CRIME_FK FOREIGN KEY (ID_PERSONAGEM) REFERENCES TB_PERSONAGEM(ID_PERSONAGEM)
);

#CARACTERISTICAS FISICAS DOS PERSONAGENS
CREATE TABLE TB_MORFOLOGIA(
  ID_APARENCIA INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  ID_PERSONAGEM INT UNSIGNED NOT NULL UNIQUE,
  PELO VARCHAR(255),
  OLHOS VARCHAR(255) NOT NULL,
  ALTURA FLOAT NOT NULL,
  CONSTRAINT ID_PERSONAGEM_MORFOLOGIA_FK FOREIGN KEY (ID_PERSONAGEM) REFERENCES TB_PERSONAGEM(ID_PERSONAGEM)
);

#DICAS DO PERSONAGEM SECUNDARIO 
CREATE TABLE TB_DICA (
  ID_DICA INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  DICA TEXT NOT NULL
);

#TABELA DO EVENTO DO CASAMENTO 
CREATE TABLE TB_EVENTO (
	ID_EVENTO INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    NOME_EVENTO VARCHAR(255) NOT NULL
);

#PROGRAMAÇÕES DO EVENTO
CREATE TABLE TB_PROGRAMACAO (
  ID_PROGRAMACAO INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  NOME_PROGRAMACAO VARCHAR(255) NOT NULL,
  ID_SALA INT UNSIGNED NOT NULL, 
  ID_EVENTO INT UNSIGNED NOT NULL,
  HORA_INICIO TIME NOT NULL,
  HORA_FINAL TIME NOT NULL,
  FOREIGN KEY (ID_SALA) REFERENCES TB_SALA(ID_SALA),
  FOREIGN KEY (ID_EVENTO) REFERENCES TB_EVENTO(ID_EVENTO)
);

CREATE TABLE TB_CONVITE (
	ID_CONVITE INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    ID_EVENTO INT UNSIGNED NOT NULL,
    ID_PERSONAGEM INT UNSIGNED NOT NULL,
    CONFIRMACAO BOOL,
    FOREIGN KEY (ID_EVENTO) REFERENCES TB_EVENTO(ID_EVENTO),
    FOREIGN KEY (ID_PERSONAGEM) REFERENCES TB_PERSONAGEM(ID_PERSONAGEM)
);

CREATE TABLE TB_FUNCAO (
	ID_FUNCAO INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    NOME_FUNCAO VARCHAR(255)
);

CREATE TABLE TB_CONTRATO (
	ID_CONTRATO INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    ID_EVENTO INT UNSIGNED NOT NULL,
    ID_PERSONAGEM INT UNSIGNED NOT NULL,
    ID_FUNCAO INT UNSIGNED NOT NULL,
    FOREIGN KEY (ID_EVENTO) REFERENCES TB_EVENTO(ID_EVENTO),
    FOREIGN KEY (ID_PERSONAGEM) REFERENCES TB_PERSONAGEM(ID_PERSONAGEM),
    FOREIGN KEY (ID_FUNCAO) REFERENCES TB_FUNCAO(ID_FUNCAO)
);

USE SQL_MYSTERY;

DELIMITER $

#SÓ PODE ADICINAR NA TB_CONVITE OS PERSONAGENS CONVIDADOS DA TB_PERFIL
CREATE TRIGGER TG_CONVITE_PERSONAGEM
BEFORE INSERT
ON TB_CONVITE
FOR EACH ROW
BEGIN
	DECLARE vPerfil TEXT;
    SET vPerfil = (
		SELECT
			PL.NOME
		FROM
			TB_PERSONAGEM PM
		INNER JOIN
			TB_PERFIL PL
		ON
			PL.ID_PERFIL = PM.ID_PERFIL
		WHERE
			PM.ID_PERSONAGEM = NEW.ID_PERSONAGEM
    );
    
    IF UPPER(vPerfil) != 'CONVIDADO' THEN
		SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT = 'ESSE PERSONAGEM É FUNCIONÁRIO';     
   END IF;
END;

#SÓ PODE ADICINAR NA TB_CONTRATO OS PERSONAGENS FUNCIONÁRIOS DA TB_PERFIL
CREATE TRIGGER TG_CONTRATO_PERSONAGEM
BEFORE INSERT
ON TB_CONTRATO
FOR EACH ROW
BEGIN
	DECLARE vPerfil TEXT;
    SET vPerfil = (
		SELECT
			PL.NOME
		FROM
			TB_PERSONAGEM PM
		INNER JOIN
			TB_PERFIL PL
		ON
			PL.ID_PERFIL = PM.ID_PERFIL
		WHERE
			PM.ID_PERSONAGEM = NEW.ID_PERSONAGEM
    );
    
    IF UPPER(vPerfil) != 'FUNCIONÁRIO' THEN
		SIGNAL SQLSTATE '45002' SET MESSAGE_TEXT = 'ESSE PERSONAGEM É CONVIDADO';     
   END IF;
END;

$ DELIMITER ;